// Date: 3/11/2015 6:28:03 AM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX

package com.kjk.silicongolem.model;

import org.lwjgl.opengl.GL11;

import com.kjk.silicongolem.entity.EntitySGolem;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelBiped;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.entity.EntityLivingBase;
import net.minecraft.entity.monster.EntityIronGolem;
import net.minecraft.util.MathHelper;


public class ModelSGolem extends ModelBiped
{
	  //fields
    ModelRenderer crt;
    //ModelRenderer bipedBody;
    //ModelRenderer bipedRightArm;
    //ModelRenderer bipedLeftArm;
    //ModelRenderer bipedRightLeg;
    //ModelRenderer bipedLeftLeg;
    ModelRenderer waist;
  
  public ModelSGolem()
  {
    textureWidth = 128;
    textureHeight = 128;
    
      crt = new ModelRenderer(this, 0, 82);
      crt.addBox(-6F, 0F, 0F, 12, 8, 7);
      crt.setRotationPoint(0F, -5.533333F, 6F);
      crt.setTextureSize(128, 128);
      crt.mirror = true;
      setRotation(crt, 0F, 0F, 0F);
      bipedBody = new ModelRenderer(this, 0, 40);
      bipedBody.addBox(-9F, 0F, -5F, 18, 12, 11);
      bipedBody.setRotationPoint(0F, -8F, 2F);
      bipedBody.setTextureSize(128, 128);
      bipedBody.mirror = true;
      setRotation(bipedBody, 0F, 0F, 0F);
      bipedRightArm = new ModelRenderer(this, 60, 21);
      bipedRightArm.addBox(-3F, -2F, -2F, 4, 30, 6);
      bipedRightArm.setRotationPoint(-10F, -7F, 2F);
      bipedRightArm.setTextureSize(128, 128);
      bipedRightArm.mirror = true;
      setRotation(bipedRightArm, 0F, 0F, 0F);
      bipedLeftArm = new ModelRenderer(this, 60, 58);
      bipedLeftArm.addBox(-1F, -1F, -2F, 4, 30, 6);
      bipedLeftArm.setRotationPoint(10F, -8F, 2F);
      bipedLeftArm.setTextureSize(128, 128);
      bipedLeftArm.mirror = true;
      setRotation(bipedLeftArm, 0F, 0F, 0F);
      bipedRightLeg = new ModelRenderer(this, 37, 0);
      bipedRightLeg.addBox(-2F, 0F, -2F, 6, 16, 5);
      bipedRightLeg.setRotationPoint(-5F, 8F, 3F);
      bipedRightLeg.setTextureSize(128, 128);
      bipedRightLeg.mirror = true;
      setRotation(bipedRightLeg, 0F, 0F, 0F);
      bipedLeftLeg = new ModelRenderer(this, 60, 0);
      bipedLeftLeg.addBox(-2F, 0F, -2F, 6, 16, 5);
      bipedLeftLeg.setRotationPoint(2F, 8F, 3F);
      bipedLeftLeg.setTextureSize(128, 128);
      bipedLeftLeg.mirror = true;
      setRotation(bipedLeftLeg, 0F, 0F, 0F);
      waist = new ModelRenderer(this, 0, 70);
      waist.addBox(-5F, -2F, 0F, 9, 5, 6);
      waist.setRotationPoint(0F, 6F, 0F);
      waist.setTextureSize(128, 128);
      waist.mirror = true;
      setRotation(waist, 0F, 0F, 0F);
  }
  
  public void render(Entity p_78088_1_, float p_78088_2_, float p_78088_3_, float p_78088_4_, float p_78088_5_, float p_78088_6_, float p_78088_7_)
  {
      this.setRotationAngles(p_78088_2_, p_78088_3_, p_78088_4_, p_78088_5_, p_78088_6_, p_78088_7_, p_78088_1_);

      if (this.isChild)
      {
          float f6 = 2.0F;
          GL11.glPushMatrix();
          GL11.glScalef(1.5F / f6, 1.5F / f6, 1.5F / f6);
          GL11.glTranslatef(0.0F, 16.0F * p_78088_7_, 0.0F);
          //this.bipedHead.render(p_78088_7_);
          GL11.glPopMatrix();
          GL11.glPushMatrix();
          GL11.glScalef(1.0F / f6, 1.0F / f6, 1.0F / f6);
          GL11.glTranslatef(0.0F, 24.0F * p_78088_7_, 0.0F);
          this.bipedBody.render(p_78088_7_);
          this.crt.render(p_78088_7_);
          this.waist.render(p_78088_7_);
          this.bipedRightArm.render(p_78088_7_);
          this.bipedLeftArm.render(p_78088_7_);
          this.bipedRightLeg.render(p_78088_7_);
          this.bipedLeftLeg.render(p_78088_7_);
          //this.bipedHeadwear.render(p_78088_7_);
          GL11.glPopMatrix();
      }
      else
      {
          //this.bipedHead.render(p_78088_7_);
          this.bipedBody.render(p_78088_7_);
          this.crt.render(p_78088_7_);
          this.waist.render(p_78088_7_);
          this.bipedRightArm.render(p_78088_7_);
          this.bipedLeftArm.render(p_78088_7_);
          this.bipedRightLeg.render(p_78088_7_);
          this.bipedLeftLeg.render(p_78088_7_);
          //this.bipedHeadwear.render(p_78088_7_);
      }
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float f, float f1, float f2, float f3, float f4, float f5)
  {
    super.setRotationAngles(f, f1, f2, f3, f4, f5, null);
  }
  
  public void setRotationAngles(float swingTime, float swingScale, float aa, float bb, float cc, float dd, Entity entity)
  {
      this.bipedLeftLeg.rotateAngleX = -1.5F * this.triangleWave(swingTime, 13.0F) * swingScale;
      this.bipedRightLeg.rotateAngleX = 1.5F * this.triangleWave(swingTime, 13.0F) * swingScale;
      this.bipedLeftLeg.rotateAngleY = 0.0F;
      this.bipedRightLeg.rotateAngleY = 0.0F;
      
      this.bipedLeftArm.rotateAngleX = 1.5F * this.triangleWave(swingTime * 1.5F, 13.0F) * swingScale * 0.5F;
      this.bipedRightArm.rotateAngleX = -1.5F * this.triangleWave(swingTime * 1.5F, 13.0F) * swingScale * 0.5F;
      this.bipedLeftArm.rotateAngleY = 0.0F;
      this.bipedRightArm.rotateAngleY = 0.0F;
      
	  EntitySGolem entitygolem = (EntitySGolem)entity;
	  int i = entitygolem.attackTime;

      if (i > 0)
      {
          this.bipedRightArm.rotateAngleX = -2.0F + 1.5F * this.sineWave((float)i - dd, 20.0F);
          this.bipedLeftArm.rotateAngleX = -2.0F + 1.5F * this.sineWave((float)i - dd, 20.0F);
      }
  }
  
  private float triangleWave(float x, float waveLength)
  {
      return (Math.abs(x % waveLength - waveLength * 0.5F) - waveLength * 0.25F) / (waveLength * 0.25F);
  }
  
  private float sineWave(float x, float waveLength){
	  float recip = (float) (2 * Math.PI / waveLength);
	  return (float) Math.cos(x*recip);
  }

}
